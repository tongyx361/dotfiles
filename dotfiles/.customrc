# add shortcut
shortcut="tyxrc"
if ! alias "${shortcut}"; then
    echo "[INFO] No shortcut exists. Adding to ~/.${shell_name}rc"
    # if using powerlevel10k, redirect output to /dev/null
    p10k_theme='powerlevel10k/powerlevel10k'
    if [[ ${shell_name} == 'zsh' && (${ZSH_THEME} == ${p10k_theme} || (${ZSH_THEME} == 'random' && ${RANDOM_THEME} == ${p10k_theme})) ]]; then
        redirection='> /dev/null'
    else
        redirection=''
    fi
    systemrc_cmd="cd ${DATA_ROOT} && source ./dotfiles/.systemrc ${redirection}"
    alias_shortcut_cmd="alias ${shortcut}='${systemrc_cmd}'"
    eval "${alias_shortcut_cmd}"
    echo "\n${alias_shortcut_cmd}\n" >>~/.${shell_name}rc
fi

##########################################################

# set user-consistent configs

export GIT_AUTHOR_NAME="Shawn Yuxuan Tong"
export GIT_AUTHOR_EMAIL="tongyuxuan361@gmail.com"

if ! git config --global user.email; then
    git config --global user.email "${GIT_AUTHOR_EMAIL}"
    echo "[WARNING] git config --global user.email ${GIT_AUTHOR_EMAIL}"
fi

if ! git config --global user.name; then
    git config --global user.name "${GIT_AUTHOR_NAME}"
    echo "[WARNING] git config --global user.name ${GIT_AUTHOR_NAME}"
fi

##########################################################

# system-dependent configs

DEFAULT_CONFIG_DIRPATH="${DATA_ROOT}/dotfiles/.config"
echo "[INFO] Reading system-dependent configs..."

# Specify the path to the configuration file
config_file="${DEFAULT_CONFIG_DIRPATH}/system.conf"

# Check if the configuration file exists
if [ ! -f "${config_file}" ]; then
    echo "[WARNING] Configuration file '${config_file}' does not exist. Using the default config"
    config_file="${DEFAULT_CONFIG_DIRPATH}/default-system.conf"
fi
# Read the configuration file line by line and extract configuration values
while IFS= read -r line; do
    # Ignore comment lines that start with #
    if [[ "$line" =~ ^[^#]*= ]]; then
        # Use the cut command to extract configuration parameter and value
        config_param=$(echo "$line" | cut -d= -f1)
        config_value=$(echo "$line" | cut -d= -f2)

        # Output the configuration parameter and its corresponding value
        echo "$config_param=$config_value"
        # Set an environment variable with the same name as config_param
        eval "$config_param=$config_value"

        # You can use the configuration value for other operations here
    fi
done <"${config_file}"

##########################################################

# basic functions

function delete_files_by_name() {
  if [ $# -ne 2 ]; then
    echo "Usage: delete_files_by_name <directory> <name>"
    return 1
  fi

  local directory="$1"
  local name="$2"

  if [ ! -d "$directory" ]; then
    echo "Error: Directory '$directory' does not exist."
    return 1
  fi

  find "$directory" -type f -name "$name" -exec rm -f {} \;
  echo "Deleted all files named '$name' in '$directory' and its subdirectories."
}


function cf() {
    ls $1 | wc -l
}

# system proxy
if grep -q WSL /proc/version; then
    PROXY_IP=$(cat /etc/resolv.conf | grep "nameserver" | cut -f 2 -d " ")
else
    PROXY_IP='127.0.0.1'
fi

function sp() {
    # set_proxy()
    # IP
    if [ -z $1 ]; then
        IP="${PROXY_IP}"
    else
        IP="$1"
    fi

    # Port
    if [ -z $2 ]; then
        PORT="${PROXY_PORT}"
    else
        PORT="$2"
    fi

    export http_proxy="http://${IP}:${PORT}"
    export https_proxy="http://${IP}:${PORT}"
    export all_proxy="socks5://${IP}:${PORT}"

    # 若不在 .zshrc 中执行，则输出 proxy 信息
    if [ ! -z "$(env | grep proxy)" ]; then
        env | grep proxy
    fi
}

function up() {
    unset http_proxy
    unset https_proxy
    unset all_proxy

    # # for fish
    # set -x http_proxy
    # set -x https_proxy
    # set -x all_proxy

    # 若不在 .zshrc 中执行，则输出提示信息
    if [ -z "$(env | grep proxy)" ]; then
        echo 'Proxies unseted!'
    fi
}

if [ "${PROXY_PORT}" ]; then
    sp
fi

# # config

function activate_config() {
    # $1: default config file name
    # $2: user config path

    DEFAULT_CONFIG_PATH="${DEFAULT_CONFIG_DIRPATH}/$1"

    if [ -f "$2" ]; then
        rm "$2"
    fi
    ln "${DEFAULT_CONFIG_PATH}" "$2" || cp "${DEFAULT_CONFIG_PATH}" "$2"
}

##########################################################

# aliases for wget

alias wnc='wget --no-check-certificate'

# aliases for ps

alias pp='ps -fl -p'
alias pu="ps -fl -u ${USER}"
alias pg='ps -aux | grep'

# aliases for watch

alias wn='watch -n 1 -dc "nvidia-smi"'
alias wf='watch -n 1 -dc "free -ht"'
alias wns='watch -n 1 -dc "nvidia-smi --query-gpu=index,memory.used,power.draw,utilization.gpu --format=csv"'

# aliases for rm

alias rmcache='rm -rf ~/.cache'

# aliases for jobs

alias kl='kill -9 $!'
alias dl='disown $!'

alias kj1='kill -9 %1'
alias dj1='disown %1'

##########################################################

# python

# pip

alias pip='python -m pip'

##########################################################

# network

alias test-google="curl -I www.google.com"

##########################################################

# clash

alias setup-clash="source ${DATA_ROOT}/clash/clash.sh"

alias clash-logs="nohup curl -X GET '127.0.0.1:7777/logs' &> \"${DATA_ROOT}/clash/logs/test.out\" &"

function select-proxy() {
    curl -X PUT -H "Content-Type: application/json" -d "{\"name\":\"$1\"}" "127.0.0.1:7777/proxies/一元机场"
}

##########################################################

# flake8

# # config

FLAKE8_CONFIG_FILENAME=".flake8"

activate_config "${FLAKE8_CONFIG_FILENAME}" "${DATA_ROOT}/${FLAKE8_CONFIG_FILENAME}"

##########################################################

# black

# # config

BLACK_CONFIG_FILENAME="black"

BLACK_USER_CONFIG_PATH="${HOME}/.config/${BLACK_CONFIG_FILENAME}"

activate_config "${BLACK_CONFIG_FILENAME}" "${BLACK_USER_CONFIG_PATH}"

if [ ! -z "${WORK_REPO_NAME}" ]; then
    WORK_REPO_PATH="${DATA_ROOT}/${WORK_REPO_NAME}"
    project_black_config="${WORK_REPO_PATH}/pyproject.toml"
    echo "[WARNING] Overwriting ${project_black_config}..."
    activate_config "${BLACK_CONFIG_FILENAME}" "${project_black_config}" # Warning: this will overwrite the original file
fi

##########################################################

# alias for nvidia-smi

alias nscsv='nvidia-smi --query-compute-apps=pid,gpu_bus_id,process_name,used_gpu_memory --format=csv'
alias nspnh='nvidia-smi --query-compute-apps=pid --format=csv,noheader'
alias psnsp='ps -fl -p $(nvidia-smi --query-compute-apps=pid --format=csv,noheader)'

# functions for nvidia-smi

function nsci() {
    nvidia-smi --query-compute-apps=pid,gpu_bus_id,process_name,used_gpu_memory --format=csv -i "$1"
}

function psnsci() {
    ps -fl -p $(nvidia-smi --query-compute-apps=pid --format=csv,noheader -i "$1")
}

##########################################################

# environment variables for HuggingFace

export HF_HOME="${DATA_ROOT}/.cache/huggingface"

##########################################################

# environment variables for pip(3)

# 检查 ~/.pip 目录是否存在
if [ ! -d "$HOME/.pip" ]; then
    # 如果不存在则创建目录
    mkdir "$HOME/.pip"
fi

# 检查 pip 配置文件是否存在
if [ ! -f "$HOME/.pip/pip.conf" ]; then
    # 如果不存在则创建文件
    touch "$HOME/.pip/pip.conf"
fi

# 检查配置文件中是否包含 cache-dir 配置项
if ! grep -q "^cache-dir" "$HOME/.pip/pip.conf" 2>/dev/null; then
    # 如果不存在则添加配置项
    echo "[global]" >>"$HOME/.pip/pip.conf"
    echo "cache-dir = /path/to/new/cache/directory" >>"$HOME/.pip/pip.conf"
fi

# 替换 /path/to/new/cache/directory 为实际的缓存目录路径
sed -i 's#/path/to/new/cache/directory#'"$DATA_ROOT/.cache/pip"'#g' "$HOME/.pip/pip.conf"

# aliases for pip(3)

alias pi='pip install'

# functions for pip(3)

function pypi() {
    sp
    pip install "${1}" --index-url https://pypi.org/simple/
}

##########################################################

# git config
git config --global alias.lol "log --graph --oneline --decorate --color --all"
git config --global alias.rh "reset --hard"

git config --global core.editor "vim"
git config --global pull.rebase false

# oh-my-zsh has provided many aliases similar to the following ones

# aliases for Git
alias gst='git status'
alias ga='git add .; git status'
alias gc='git commit -m'
alias gp="git add .; git commit --message 'to merge' --author=\"${GIT_AUTHOR_NAME} <${GIT_AUTHOR_EMAIL}>\"; git pull --no-edit; git status"

## the most simple and common pipeline
alias gup="git add .; git commit --message 'update' --author=\"${GIT_AUTHOR_NAME} <${GIT_AUTHOR_EMAIL}>\"; git push; git status"
function gamend() {
    # not gam for conflicts with on-my-zsh alias
    if [ -z "$1" ]; then
        git add .
        git commit --amend --no-edit --author="${GIT_AUTHOR_NAME} <${GIT_AUTHOR_EMAIL}>"
        git push -f
        git status
    else
        git add .
        git commit --amend --message "$1" --author="${GIT_AUTHOR_NAME} <${GIT_AUTHOR_EMAIL}>"
        git push
        git status
    fi
}

##########################################################

# aliases for CUDA

# functions for CUDA

function cvdc() {
    command="CUDA_VISIBLE_DEVICES=$1  $2"
    echo "${command}"
    eval "${command}"
}

##########################################################

# aliases for nvidia-smi
alias ns='nvidia-smi'
alias nsp='nvidia-smi pmon -c 1 -s um'

##########################################################

# aliases and functions for Conda
function ca() {
    ceiling="===== Conda Env: $1 ====="
    echo "$ceiling"
    conda activate $1
    python_path=$(which python)
    echo "Current Python path: $python_path"
    echo "Current Python version: $(python --version)"

    # base
    if [[ $python_path =~ 'envs' || $python_path =~ $1 ]]; then
        echo "===== YES!! It's $1 ====="
    else
        echo "===== NO!! Retry $1 ====="
        ca $1
    fi
}

alias ce='conda info --envs'
alias cr='conda remove --all --yes --name'

# echo "DEFAULT_CONDA_ENV=${DEFAULT_CONDA_ENV}"
# ce
ca "${DEFAULT_CONDA_ENV}"

##########################################################

# environment variables for wandb

export WANDB_CACHE_DIR="${DATA_ROOT}/.cache/wandb"
export WANDB_CONFIG_DIR="${DATA_ROOT}/.config/wandb"
# export WANDB_DIR="${DATA_ROOT}/wandb"

# alias for wandb

alias wsl="wandb sync $WANDB_DIR/wandb/latest-run"

# function ws(){

# }
